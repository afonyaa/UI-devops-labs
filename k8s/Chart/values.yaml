container:
  image: afonya2001/devops
  port: 8080

resources:
  limits:
    cpu: 2.0
    memory: 256Mi
  requests:
    cpu: 1.0
    memory: 128Mi

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 50m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

prometheus:
  additionalServiceMonitors:
    - name: node-app-service-monitor
      selector:
        matchLabels:
          app.kubernetes.io/instance: node-app
          app.kubernetes.io/name: node-app-chart
      endpoints:
        - port: http
          interval: 10s
          path: /metrics

replicaCount: 3

volumes:
  config:
    name: config-volume
    mountPath: /app/config.json
    subPath: config.json
  state:
    name: node-volume
    mountPath: /app/data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 64Mi

  persistent:
    name: persistent-volume
    mountPath: /app/storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClass: ""
      resources:
        requests:
          storage: 128Mi